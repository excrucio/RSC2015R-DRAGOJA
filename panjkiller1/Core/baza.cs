

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "Core\App.config"
//     Connection String Name: "baza"
//     Connection String:      "Data Source=mssql6.mojsite.com,1555;Initial Catalog=datadigi_rfcPortable;User ID=datadigi_jvinkovic;password=**zapped**;;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Standard Edition (64-bit)
// Database Engine Edition: Standard

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace Core
{
    // ************************************************************************
    // Unit of work
    public interface IbazaContext : IDisposable
    {
        DbSet<Igra> Igra { get; set; } // igra
        DbSet<Igrac> Igrac { get; set; } // igrac
        DbSet<Korisnik> Korisnik { get; set; } // korisnik
        DbSet<Mec> Mec { get; set; } // mec
        DbSet<Prepreke> Prepreke { get; set; } // prepreke
        DbSet<Suci> Suci { get; set; } // suci
        DbSet<Sysdiagrams> Sysdiagrams { get; set; } // sysdiagrams
        DbSet<Tim> Tim { get; set; } // tim
        DbSet<TimPripadnost> TimPripadnost { get; set; } // timPripadnost
        DbSet<VrstaPrepreke> VrstaPrepreke { get; set; } // vrstaPrepreke

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
    }

    // ************************************************************************
    // Database context
    public class bazaContext : DbContext, IbazaContext
    {
        public DbSet<Igra> Igra { get; set; } // igra
        public DbSet<Igrac> Igrac { get; set; } // igrac
        public DbSet<Korisnik> Korisnik { get; set; } // korisnik
        public DbSet<Mec> Mec { get; set; } // mec
        public DbSet<Prepreke> Prepreke { get; set; } // prepreke
        public DbSet<Suci> Suci { get; set; } // suci
        public DbSet<Sysdiagrams> Sysdiagrams { get; set; } // sysdiagrams
        public DbSet<Tim> Tim { get; set; } // tim
        public DbSet<TimPripadnost> TimPripadnost { get; set; } // timPripadnost
        public DbSet<VrstaPrepreke> VrstaPrepreke { get; set; } // vrstaPrepreke
        
        static bazaContext()
        {
            System.Data.Entity.Database.SetInitializer<bazaContext>(null);
        }

        public bazaContext()
            : base("Name=baza")
        {
        }

        public bazaContext(string connectionString) : base(connectionString)
        {
        }

        public bazaContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new IgraConfiguration());
            modelBuilder.Configurations.Add(new IgracConfiguration());
            modelBuilder.Configurations.Add(new KorisnikConfiguration());
            modelBuilder.Configurations.Add(new MecConfiguration());
            modelBuilder.Configurations.Add(new PreprekeConfiguration());
            modelBuilder.Configurations.Add(new SuciConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramsConfiguration());
            modelBuilder.Configurations.Add(new TimConfiguration());
            modelBuilder.Configurations.Add(new TimPripadnostConfiguration());
            modelBuilder.Configurations.Add(new VrstaPreprekeConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new IgraConfiguration(schema));
            modelBuilder.Configurations.Add(new IgracConfiguration(schema));
            modelBuilder.Configurations.Add(new KorisnikConfiguration(schema));
            modelBuilder.Configurations.Add(new MecConfiguration(schema));
            modelBuilder.Configurations.Add(new PreprekeConfiguration(schema));
            modelBuilder.Configurations.Add(new SuciConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramsConfiguration(schema));
            modelBuilder.Configurations.Add(new TimConfiguration(schema));
            modelBuilder.Configurations.Add(new TimPripadnostConfiguration(schema));
            modelBuilder.Configurations.Add(new VrstaPreprekeConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakebazaContext : IbazaContext
    {
        public DbSet<Igra> Igra { get; set; }
        public DbSet<Igrac> Igrac { get; set; }
        public DbSet<Korisnik> Korisnik { get; set; }
        public DbSet<Mec> Mec { get; set; }
        public DbSet<Prepreke> Prepreke { get; set; }
        public DbSet<Suci> Suci { get; set; }
        public DbSet<Sysdiagrams> Sysdiagrams { get; set; }
        public DbSet<Tim> Tim { get; set; }
        public DbSet<TimPripadnost> TimPripadnost { get; set; }
        public DbSet<VrstaPrepreke> VrstaPrepreke { get; set; }

        public FakebazaContext()
        {
            Igra = new FakeDbSet<Igra>();
            Igrac = new FakeDbSet<Igrac>();
            Korisnik = new FakeDbSet<Korisnik>();
            Mec = new FakeDbSet<Mec>();
            Prepreke = new FakeDbSet<Prepreke>();
            Suci = new FakeDbSet<Suci>();
            Sysdiagrams = new FakeDbSet<Sysdiagrams>();
            Tim = new FakeDbSet<Tim>();
            TimPripadnost = new FakeDbSet<TimPripadnost>();
            VrstaPrepreke = new FakeDbSet<VrstaPrepreke>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // igra
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Igra
    {
        public int Id { get; set; } // ID (Primary key)
        public int? PrviTimId { get; set; } // prviTimID
        public int? DrugiTimId { get; set; } // drugiTimID
        public int MecId { get; set; } // mecID
        public int? KillScore { get; set; } // killScore
        public int? CaptureScore { get; set; } // captureScore
        public int? Trajanje { get; set; } // trajanje

        // Reverse navigation
        public virtual ICollection<Prepreke> Prepreke { get; set; } // prepreke.FK__prepreke__igraID__47DBAE45

        // Foreign keys
        public virtual Mec Mec { get; set; } // FK__igra__mecID__4316F928
        public virtual Tim Tim_DrugiTimId { get; set; } // FK__igra__drugiTimID__44FF419A
        public virtual Tim Tim_PrviTimId { get; set; } // FK__igra__prviTimID__440B1D61
        
        public Igra()
        {
            Prepreke = new List<Prepreke>();
        }
    }

    // igrac
    public class Igrac
    {
        public int Id { get; set; } // ID (Primary key)
        public bool? Mrtav { get; set; } // mrtav
        public decimal GeoDuljina { get; set; } // geoDuljina
        public decimal GeoSirina { get; set; } // geoSirina
        public int KorisnikId { get; set; } // korisnikID

        // Foreign keys
        public virtual Korisnik Korisnik { get; set; } // FK__igrac__korisnikI__35BCFE0A
    }

    // korisnik
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Korisnik
    {
        public int Id { get; set; } // ID (Primary key)
        public string FaceId { get; set; } // faceID

        // Reverse navigation
        public virtual ICollection<Igrac> Igrac { get; set; } // igrac.FK__igrac__korisnikI__35BCFE0A
        public virtual ICollection<TimPripadnost> TimPripadnost { get; set; } // timPripadnost.FK__timPripad__koris__2F10007B
        
        public Korisnik()
        {
            Igrac = new List<Igrac>();
            TimPripadnost = new List<TimPripadnost>();
        }
    }

    // mec
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Mec
    {
        public int Id { get; set; } // ID (Primary key)
        public string Naziv { get; set; } // naziv
        public bool Tip { get; set; } // tip
        public bool? Aktivan { get; set; } // aktivan
        public bool? Spreman { get; set; } // spreman
        public int MaxBrojIgraca { get; set; } // maxBrojIgraca

        // Reverse navigation
        public virtual ICollection<Igra> Igra { get; set; } // igra.FK__igra__mecID__4316F928
        
        public Mec()
        {
            Igra = new List<Igra>();
        }
    }

    // prepreke
    public class Prepreke
    {
        public int Id { get; set; } // ID (Primary key)
        public int IgraId { get; set; } // igraID
        public int PreprekaId { get; set; } // preprekaID
        public decimal GeoDuljina { get; set; } // geoDuljina
        public decimal GeoSirina { get; set; } // geoSirina

        // Foreign keys
        public virtual Igra Igra { get; set; } // FK__prepreke__igraID__47DBAE45
        public virtual VrstaPrepreke VrstaPrepreke { get; set; } // FK__prepreke__prepre__48CFD27E
    }

    // suci
    public class Suci
    {
        public int Id { get; set; } // ID (Primary key)
        public string Username { get; set; } // username
        public string Pass { get; set; } // pass
    }

    // sysdiagrams
    public class Sysdiagrams
    {
        public string Name { get; set; } // name
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // tim
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Tim
    {
        public int Id { get; set; } // ID (Primary key)
        public string Ime { get; set; } // ime

        // Reverse navigation
        public virtual ICollection<Igra> Igra_DrugiTimId { get; set; } // igra.FK__igra__drugiTimID__44FF419A
        public virtual ICollection<Igra> Igra_PrviTimId { get; set; } // igra.FK__igra__prviTimID__440B1D61
        public virtual ICollection<TimPripadnost> TimPripadnost { get; set; } // timPripadnost.FK__timPripad__timID__2E1BDC42
        
        public Tim()
        {
            Igra_DrugiTimId = new List<Igra>();
            Igra_PrviTimId = new List<Igra>();
            TimPripadnost = new List<TimPripadnost>();
        }
    }

    // timPripadnost
    public class TimPripadnost
    {
        public int Id { get; set; } // ID (Primary key)
        public int KorisnikId { get; set; } // korisnikID
        public int TimId { get; set; } // timID

        // Foreign keys
        public virtual Korisnik Korisnik { get; set; } // FK__timPripad__koris__2F10007B
        public virtual Tim Tim { get; set; } // FK__timPripad__timID__2E1BDC42
    }

    // vrstaPrepreke
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class VrstaPrepreke
    {
        public int Id { get; set; } // ID (Primary key)
        public string Ime { get; set; } // ime

        // Reverse navigation
        public virtual ICollection<Prepreke> Prepreke { get; set; } // prepreke.FK__prepreke__prepre__48CFD27E
        
        public VrstaPrepreke()
        {
            Prepreke = new List<Prepreke>();
        }
    }


    // ************************************************************************
    // POCO Configuration

    // igra
    public class IgraConfiguration : EntityTypeConfiguration<Igra>
    {
        public IgraConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public IgraConfiguration(string schema)
        {
            ToTable(schema + ".igra");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.PrviTimId).HasColumnName("prviTimID").IsOptional().HasColumnType("int");
            Property(x => x.DrugiTimId).HasColumnName("drugiTimID").IsOptional().HasColumnType("int");
            Property(x => x.MecId).HasColumnName("mecID").IsRequired().HasColumnType("int");
            Property(x => x.KillScore).HasColumnName("killScore").IsOptional().HasColumnType("int");
            Property(x => x.CaptureScore).HasColumnName("captureScore").IsOptional().HasColumnType("int");
            Property(x => x.Trajanje).HasColumnName("trajanje").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Tim_DrugiTimId).WithMany(b => b.Igra_DrugiTimId).HasForeignKey(c => c.DrugiTimId); // FK__igra__drugiTimID__44FF419A
            HasOptional(a => a.Tim_PrviTimId).WithMany(b => b.Igra_PrviTimId).HasForeignKey(c => c.PrviTimId); // FK__igra__prviTimID__440B1D61
            HasRequired(a => a.Mec).WithMany(b => b.Igra).HasForeignKey(c => c.MecId); // FK__igra__mecID__4316F928
        }
    }

    // igrac
    public class IgracConfiguration : EntityTypeConfiguration<Igrac>
    {
        public IgracConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public IgracConfiguration(string schema)
        {
            ToTable(schema + ".igrac");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Mrtav).HasColumnName("mrtav").IsOptional().HasColumnType("bit");
            Property(x => x.GeoDuljina).HasColumnName("geoDuljina").IsRequired().HasColumnType("decimal");
            Property(x => x.GeoSirina).HasColumnName("geoSirina").IsRequired().HasColumnType("decimal");
            Property(x => x.KorisnikId).HasColumnName("korisnikID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Korisnik).WithMany(b => b.Igrac).HasForeignKey(c => c.KorisnikId); // FK__igrac__korisnikI__35BCFE0A
        }
    }

    // korisnik
    public class KorisnikConfiguration : EntityTypeConfiguration<Korisnik>
    {
        public KorisnikConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public KorisnikConfiguration(string schema)
        {
            ToTable(schema + ".korisnik");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.FaceId).HasColumnName("faceID").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
        }
    }

    // mec
    public class MecConfiguration : EntityTypeConfiguration<Mec>
    {
        public MecConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public MecConfiguration(string schema)
        {
            ToTable(schema + ".mec");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Naziv).HasColumnName("naziv").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Tip).HasColumnName("tip").IsRequired().HasColumnType("bit");
            Property(x => x.Aktivan).HasColumnName("aktivan").IsOptional().HasColumnType("bit");
            Property(x => x.Spreman).HasColumnName("spreman").IsOptional().HasColumnType("bit");
            Property(x => x.MaxBrojIgraca).HasColumnName("maxBrojIgraca").IsRequired().HasColumnType("int");
        }
    }

    // prepreke
    public class PreprekeConfiguration : EntityTypeConfiguration<Prepreke>
    {
        public PreprekeConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public PreprekeConfiguration(string schema)
        {
            ToTable(schema + ".prepreke");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.IgraId).HasColumnName("igraID").IsRequired().HasColumnType("int");
            Property(x => x.PreprekaId).HasColumnName("preprekaID").IsRequired().HasColumnType("int");
            Property(x => x.GeoDuljina).HasColumnName("geoDuljina").IsRequired().HasColumnType("decimal");
            Property(x => x.GeoSirina).HasColumnName("geoSirina").IsRequired().HasColumnType("decimal");

            // Foreign keys
            HasRequired(a => a.Igra).WithMany(b => b.Prepreke).HasForeignKey(c => c.IgraId); // FK__prepreke__igraID__47DBAE45
            HasRequired(a => a.VrstaPrepreke).WithMany(b => b.Prepreke).HasForeignKey(c => c.PreprekaId); // FK__prepreke__prepre__48CFD27E
        }
    }

    // suci
    public class SuciConfiguration : EntityTypeConfiguration<Suci>
    {
        public SuciConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public SuciConfiguration(string schema)
        {
            ToTable(schema + ".suci");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName("username").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Pass).HasColumnName("pass").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
        }
    }

    // sysdiagrams
    public class SysdiagramsConfiguration : EntityTypeConfiguration<Sysdiagrams>
    {
        public SysdiagramsConfiguration()
            : this("dbo")
        {
        }
 
        public SysdiagramsConfiguration(string schema)
        {
            ToTable(schema + ".sysdiagrams");
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName("name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName("principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName("diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName("version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName("definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // tim
    public class TimConfiguration : EntityTypeConfiguration<Tim>
    {
        public TimConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public TimConfiguration(string schema)
        {
            ToTable(schema + ".tim");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Ime).HasColumnName("ime").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
        }
    }

    // timPripadnost
    public class TimPripadnostConfiguration : EntityTypeConfiguration<TimPripadnost>
    {
        public TimPripadnostConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public TimPripadnostConfiguration(string schema)
        {
            ToTable(schema + ".timPripadnost");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.KorisnikId).HasColumnName("korisnikID").IsRequired().HasColumnType("int");
            Property(x => x.TimId).HasColumnName("timID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Korisnik).WithMany(b => b.TimPripadnost).HasForeignKey(c => c.KorisnikId); // FK__timPripad__koris__2F10007B
            HasRequired(a => a.Tim).WithMany(b => b.TimPripadnost).HasForeignKey(c => c.TimId); // FK__timPripad__timID__2E1BDC42
        }
    }

    // vrstaPrepreke
    public class VrstaPreprekeConfiguration : EntityTypeConfiguration<VrstaPrepreke>
    {
        public VrstaPreprekeConfiguration()
            : this("datadigi_jvinkovic")
        {
        }
 
        public VrstaPreprekeConfiguration(string schema)
        {
            ToTable(schema + ".vrstaPrepreke");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Ime).HasColumnName("ime").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
        }
    }


    // ************************************************************************
    // Stored procedure return models

}
// </auto-generated>

